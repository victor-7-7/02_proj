version: '3'

# Вариант сборки для продакшена
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod

    container_name: 02_proj-frontend
    # npm-пакет serve (установленный в контейнер докер-файлом) берет статические 
    # ресурсы из папки build и отдает браузеру через локальный порт 3000 
    command: serve -s build -l 3000
    restart: unless-stopped    

    # Слева - порт хоста (наша локальная машина). Справа - порт контейнера.
    ports:
      - "3000:3000"
    networks:
      - 02_proj-network
      
  api:
    build: ./api
    container_name: 02_proj-api
    command: npm run start
    restart: unless-stopped
    
    environment:
      - PORT=3001
      # Переменная HOST может понадобиться в некоторых юзкейсах, когда 
      # сервису понадобиться редиректить запрос на главную страницу сайта. 
      # В нашем проекте этого нет, поэтому можно было бы и убрать переменную, 
      # но мы ее сохраняем для дебажных логов
      - HOST=http://02-proj.com
      - MONGO_URL=mongodb://api_db:27017/api
      # Адреса для взаимодействие между сервисами (контейнерами) внутри 
      # докерной сети имеют следующий вид (для локалхоста адрес бесполезен)
      - AUTH_API_URL=http://auth:3002/api
    # Свойство depends_on означает, что сначала мы хотим запустить БД api_db, 
    # и только после этого стартануть сервис-контейнер api 
    depends_on:
      - api_db
    networks:
      - 02_proj-network

  auth:
      build: ./auth
      container_name: 02_proj-auth
      command: npm run start
      restart: unless-stopped
      
      environment:
        - PORT=3002 # Порт контейнера (значение справа от :)
        # - HOST=http://02-proj.com
        - MONGO_URL=mongodb://auth_db:27017/auth
        - API_URL=http://api:3001/api
      depends_on:
        - auth_db
      networks:
        - 02_proj-network

  api_db:
    image: mongo:latest
    container_name: 02_proj-api_db
    volumes:
      # Симлинк mongodb_api, ссылающийся на путь в контейнере
      - mongodb_api:/data/db
    networks:
      - 02_proj-network

  auth_db:
    image: mongo:latest
    container_name: 02_proj-auth_db
    volumes:
      # Симлинк mongodb_auth, ссылающийся на путь в контейнере
      - mongodb_auth:/data/db
    networks:
      - 02_proj-network

  nginx:
    image: nginx:stable-alpine
    container_name: 02_proj-nginx
    ports:
      - "80:80"
    volumes:
    # Конфиг для продакшена (слева) будет помещен в контейнер по пути справа
      - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf
    # Указываем зависимости, чтобы сервис nginx поднимался ПОСЛЕ 
    # поднятия сервисов frontend и т.д. Иначе nginx упадет, потому что 
    # он не сможет спроксировать запрос на сервис, который ранится 
    # (находится в стадии запуска)
    depends_on:
      - frontend
      - api
      - auth
    networks:
      - 02_proj-network


# Эти вольюмы мы можем шарить между нашими сервисами (контейнерами)
volumes:
  mongodb_api:
  mongodb_auth:


networks:
  02_proj-network:
    driver: bridge